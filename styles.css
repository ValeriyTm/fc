@font-face {
  font-family: "Heebo";
  src: url("/fonts/Heebo-Light.woff2") format("woff2");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "Yantramanav";
  src: url("/fonts/Yantramanav-Bold.woff2") format("woff2");
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "Heebo";
  src: url("/fonts/Heebo-Bold.woff2") format("woff2");
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

/* Нормализация. Начало */

/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
  */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
  */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
  */
:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
  */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
  */
p {
  --paragraphMarginBottom: 24px;

  margin-block: 0;
}

/**
   Внешний отступ вниз для параграфа без атрибута class,
   который расположен не последним среди своих соседних элементов
  */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
   Упрощаем работу с изображениями и видео
  */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
   Наследуем свойства шрифт для полей ввода
  */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  height: 100%;
  /**
     Убираем скачок интерфейса по горизонтали
     при появлении / исчезновении скроллбара
    */
  scrollbar-gutter: stable;
}

/**
   Плавный скролл
  */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  min-height: 100%;
  /**
     Унифицированный интерлиньяж
    */
  line-height: 1.5;
}

/*   Нормализация высоты элемента ссылки при его инспектировании в DevTools  */
a:where([class]) {
  display: inline-flex;
}

/*Курсор-рука при наведении на элемент  */
button:hover {
  cursor: pointer;
}

/**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут fill со значением 'none' или начинается с 'url')
  */
:where([fill]:not([fill="none"], [fill^="url"])) {
  fill: currentColor;
}

/**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут stroke со значением 'none')
  */
:where([stroke]:not([stroke="none"], [stroke^="url"])) {
  stroke: currentColor;
}

/**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
  */
svg * {
  transition-property: fill, stroke;
}

/**
   Приведение рамок таблиц в классический 'collapse' вид
  */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
  */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Нормализация. Конец */

/*Задаепм глобальные переменные*/
:root {
  --color-dark: #000000;
  --color-dark-alternate: #131619;
  --color-light: #ffffff;
  --color-dark-grey: #404040;
  --color-light-grey: #c4c4c4;
  --border-radius: 30px;
  --border: 1px solid var(--color-light);
  --font-family-base: "Heebo", sans-serif;
  --font-family-accent: "Yantramanav", sans-serif;
  --input-height: 54px;
  --container-width: 1300px;
  --container-padding-x: 25px;
  --container-padding-y: 15px;
  --transition-duration: 0.2s;
  --header-height: 90px;
}

body {
  font-family: var(--font-family-base);
  color: var(--color-light-grey);
  font-size: 16px;
  line-height: 1.75;
  background-color: var(--color-dark);
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  /*По умолчанию в браузере если задали width 1300px и padding-inline 15px, то финальная ширина элемента будет равна 1330px.
  Если же мы установим box-sizing как border-box (а это делают в 99.99% проектов), то при задании тех же самых значений (width 1300px и padding-inline 15px) финальная ширина элемента будет равна 1300px. А внутренние горизонтальные отступы будут «толкать» контент слева и справа на 15px с каждой стороны и по итогу сам контент будет ограничен шириной в 1270px. 
  Чтобы при box-sizing border-box ширина, заданная в max-width, соответствовала значению ширины контента по макету, необходимо плюсовать в calc к container-width внутренние горизонтальные отступы с каждой стороны (container-padding-x * 2). */
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 700;
  text-transform: uppercase;
}

.button {
  display: inline-flex; /*Делаем строчным, чтобы задать высоту*/
  height: 38px;
  align-items: center;
  padding-inline: 26px;
  font-size: 12px;
  font-weight: 700;
  line-height: 2;
  letter-spacing: 1.2px;
  text-transform: uppercase;
  background-color: var(--color-light);
  border: none;
  border-radius: var(--border-radius);
  white-space: nowrap;
}

.button:hover {
  background-color: var(--color-light-grey);
  cursor: default;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  column-gap: 20px;
  min-height: var(--header-height);
  max-width: 1920px; /*Чтобы на больших экранах header не разъехался сильно широко*/
  padding-inline: 32px; /*Задаем внутренние отступы по оси x от краев экрана*/
  background-color: var(--color-dark-alternate);
}

.header-logo {
  flex-shrink: 0; /*Чтобы логотип не сжимался при сжатии экрана*/
}

.header-menu-list {
  display: flex;
  flex-wrap: wrap; /*Чтобы пункты меню перекидывались на новую строку при сжатии*/
  column-gap: 62px;
}

/*Для всех интерактивных элементов добавляем плавную анимацию*/
a,
button,
input,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  color: var(--color-light);
}

a:hover {
  color: var(--color-light-grey);
}

.header-menu-link {
  /*Следующие 3 строки нужны, чтобы расширить по вертикали область нажатия на ссылки*/
  display: inline-flex; /*Делаем строчным, чтобы задать высоту*/
  align-items: center;
  height: var(--header-height);
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 700;
  font-size: 12px;
  letter-spacing: 1.2px;
  /*Задаем промежутки между элементами, чтобы MENU и точка стояли не впритык*/
  column-gap: 7px;
}

.header-menu-link.is-current::after {
  content: "";
  width: 5px;
  aspect-ratio: 1;
  background-color: currentColor;
  border-radius: 50%;
}

.header-actions {
  display: flex;
  column-gap: 40px;
}

.header-burger-button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 40px;
  aspect-ratio: 1;
  background-color: transparent;
  border: var(--border);
  border-radius: 50%;
}

.abc {
  fill: rgb(180, 199, 10); /*Окрашиваем бургер-иконку*/
}
/* Далее стили для основного содержимого страницы */

.banner {
  padding: 36px 70px;
  min-height: calc(100vh - var(--header-height));
  background-color: var(--color-dark-alternate);
  display: flex;
  flex-direction: column;
  justify-content: end;
  color: var(--color-light);
}

.banner-body {
  text-transform: uppercase;
}

.banner-info {
  display: flex; /*К строчному псевдоэлементу before сможем применить размеры (width), только если сделаем его flex-элементом, т.е. задаем display:flex для родителя*/
  align-items: end; /*Прижимаем текст к низу*/
  font-size: clamp(
    16px,
    1.56vw,
    30px
  ); /*Задали минимальный размер шрифта - 16px, максимальный - 30px и рекомендуемый - 1.56vw, который получили из макета, поделив 30px на 1920px ширины макета и умножив на 100*/
  line-height: 1.27;
  font-weight: 700;
}

/*Помещаем иконку стрелки перед дивом с классом banner-info*/
.banner-info::before {
  content: ""; /*Задали пустой контент, иначе вообще ничего не отобразится*/
  width: clamp(
    60px,
    10.1vw,
    194px
  ); /*Размер стрелки будет не менее 60px и не более 194px; в остальных случаях от будет равен 10% от ширины viewport, что вычислили из макета, поделив 194 на 1920, и умножив на 100*/
  aspect-ratio: 1;
  margin-right: 30px;
  background: url(/icons/arrow.svg) center/contain no-repeat; /*Путь, центровка, заполнение всего доступного пространства с сохранением пропорций, без повторений*/
}

.banner-title {
  font-size: min(
    18.75vw,
    360px
  ); /*Ограничили максимальный размер в 360px; в остальных случаях размер 18.75vw - это значение посчитали из макета, поделив 360px на 1920px (ширина макета) и на 100 умножили*/
  line-height: 1;
}

.banner-pagination-list {
  display: flex;
  justify-content: center;
}

.banner-pagination-item {
  display: flex; /*Задаем для элементов списка это, чтобы высота элементов li была равна высоте содержимого*/
}

.banner-pagination-button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  padding: 7px;
  background-color: transparent;
  border: none;
}

/*Расширяем зону нажатия, добавив padding. Это сделаем через "after"*/
.banner-pagination-button::after {
  content: "";
  width: 10px;
  aspect-ratio: 1;
  border: var(--border);
  border-radius: 50%;
  transition-duration: var(--transition-duration);
}

.banner-pagination-button.is-current::after {
  background-color: var(--color-light);
}

.banner-pagination-button:not(.is-current):hover::after {
  border-color: var(--color-light-grey);
}

/* Далее медиазапросы */

@media (max-width: 1024px) {
  .header {
    flex-wrap: wrap;
    row-gap: 10px;
  }
  .header-menu {
    order: 1;
    flex-basis: 100%;
  }
  .header-menu-link {
    height: 50px;
  }

  .header,
  .banner {
    padding-inline: 15px; /*Уменьшили отступы до 15px*/
  }

  .banner {
    row-gap: 10px;
  }
}

@media (max-width: 767px) {
  .button {
    padding-inline: 18px;
  }

  .header {
    padding-top: 10px;
  }

  .header-menu-list {
    column-gap: 24px;
  }

  .header-actions {
    column-gap: 15px;
  }

  .header-menu-link {
    height: 32px;
  }

  .banner-info {
    margin-bottom: 5px;
  }

  .banner-info::before {
    margin-right: 10px;
  }
}
